{
	"info": {
		"_postman_id": "26ac7d34-58f9-46d8-8052-38962bacba46",
		"name": "Gridiron Config",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12229020"
	},
	"item": [
		{
			"name": "01 - IoT Agent - Create a Service Group for Pipette",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"services\": [\n   {\n     \"apikey\":      \"4jggokgpepnvsb2uv4s40d59ov2\",\n     \"cbroker\":     \"http://{{hostOrion}}:1026\",\n     \"entity_type\": \"pipette\",\n     \"resource\":    \"/iot/json\"\n   }\n ]\n}"
				},
				"url": {
					"raw": "http://{{hostAgent}}:{{northPortAgent}}/iot/services",
					"protocol": "http",
					"host": [
						"{{hostAgent}}"
					],
					"port": "{{northPortAgent}}",
					"path": [
						"iot",
						"services"
					]
				},
				"description": "Invoking group provision is always the the first step in connecting devices since it is always necessary to\nsupply an authentication key with each measurement and the IoT Agent will not initially know which URL \nthe context broker is responding on.\n\nIt is possible to set up default commands and attributes for all devices as well, but this\nis not done within this tutorial as we will be provisioning each device separately.\n\nThis example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices\nwill be sending messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)\n\nIn the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate\nthemselves by including the token `4jggokgpepnvsb2uv4s40d59ov`. For an UltraLight IoT Agent this means devices will\nbe sending GET or POST requests to: \n\n```\nhttp://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov\n```\n\nWhich should be familiar UltraLight 2.0 syntax from the previous tutorial.\n\nWhen a measurement from an IoT device is received on the resource url it needs to be \ninterpreted and passed to the context broker. The `entity_type` attribute provides a\ndefault `type` for each device which has made a  request (in this case anonymous devices\nwill be known as `Thing` entities. Furthermore the location of the\ncontext broker (`cbroker`) is needed, so that the IoT Agent can pass on any measurements \nreceived to the  correct URL. `cbroker` is an optional attribute - if it is not provided, \nthe IoT Agent uses the context broker URL as defined in the configuration file, however\nit has been included here for completeness."
			},
			"response": []
		},
		{
			"name": "02 - IoT Agent - Create a Service Group for Microscope",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"services\": [\n   {\n     \"apikey\":      \"4jggokgpepnvsb2uv4s40d59ov3\",\n     \"cbroker\":     \"http://{{hostOrion}}:1026\",\n     \"entity_type\": \"microscope\",\n     \"resource\":    \"/iot/json\"\n   }\n ]\n}"
				},
				"url": {
					"raw": "http://{{hostAgent}}:{{northPortAgent}}/iot/services",
					"protocol": "http",
					"host": [
						"{{hostAgent}}"
					],
					"port": "{{northPortAgent}}",
					"path": [
						"iot",
						"services"
					]
				},
				"description": "Invoking group provision is always the the first step in connecting devices since it is always necessary to\nsupply an authentication key with each measurement and the IoT Agent will not initially know which URL \nthe context broker is responding on.\n\nIt is possible to set up default commands and attributes for all devices as well, but this\nis not done within this tutorial as we will be provisioning each device separately.\n\nThis example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices\nwill be sending messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)\n\nIn the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate\nthemselves by including the token `4jggokgpepnvsb2uv4s40d59ov`. For an UltraLight IoT Agent this means devices will\nbe sending GET or POST requests to: \n\n```\nhttp://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov\n```\n\nWhich should be familiar UltraLight 2.0 syntax from the previous tutorial.\n\nWhen a measurement from an IoT device is received on the resource url it needs to be \ninterpreted and passed to the context broker. The `entity_type` attribute provides a\ndefault `type` for each device which has made a  request (in this case anonymous devices\nwill be known as `Thing` entities. Furthermore the location of the\ncontext broker (`cbroker`) is needed, so that the IoT Agent can pass on any measurements \nreceived to the  correct URL. `cbroker` is an optional attribute - if it is not provided, \nthe IoT Agent uses the context broker URL as defined in the configuration file, however\nit has been included here for completeness."
			},
			"response": []
		},
		{
			"name": "03 - IoT Agent - Pipette Provision an Actuator",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"devices\": [\n    {\n            \"device_id\": \"pipetteActuator\",\n            \"service\": \"openiot\",\n            \"service_path\": \"/\",\n            \"entity_name\": \"urn:ngsi-ld:pipetteActuator\",\n            \"entity_type\": \"pipette\",\n            \"endpoint\": \"http://{{hostPipettaAPI}}:{{portPipettaAPI}}/start_protocol\",\n            \"polling\": true,\n            \"transport\": \"HTTP\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"intervalFirstTransfer\",\n                    \"name\": \"intervalFirstTransfer\",\n                    \"type\": \"Float\"\n                },\n                {\n                    \"object_id\": \"intervalProcess\",\n                    \"name\": \"intervalProcess\",\n                    \"type\": \"Float\"\n                },\n                {\n                    \"object_id\": \"intervalSetup\",\n                    \"name\": \"intervalSetup\",\n                    \"type\": \"Float\"\n                },\n                {\n                    \"object_id\": \"intervalTransfer\",\n                    \"name\": \"intervalTransfer\",\n                    \"type\": \"Float\"\n                },\n                {\n                    \"object_id\": \"n_cuvettes\",\n                    \"name\": \"n_cuvettes\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"n_eppendorfs\",\n                    \"name\": \"n_eppendorfs\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"n_falcons_15ml\",\n                    \"name\": \"n_falcons_15ml\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"n_falcons_50ml\",\n                    \"name\": \"n_falcons_50ml\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"n_wellplates\",\n                    \"name\": \"n_wellplates\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"protocol\",\n                    \"name\": \"protocol\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"starting_v_falcon\",\n                    \"name\": \"starting_v_falcon\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"starting_v_falcon_B4\",\n                    \"name\": \"starting_v_falcon_B4\",\n                    \"type\": \"Integer\"\n                },\n                {\n                    \"object_id\": \"timeFirstTransfeStart\",\n                    \"name\": \"timeFirstTransfeStart\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"object_id\": \"timeFirstTransferEnd\",\n                    \"name\": \"timeFirstTransferEnd\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"object_id\": \"timeStart\",\n                    \"name\": \"timeStart\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"object_id\": \"volume_e\",\n                    \"name\": \"volume_e\",\n                    \"type\": \"Float\"\n                },\n                {\n                    \"object_id\": \"volume_falcons\",\n                    \"name\": \"volume_falcons\",\n                    \"type\": \"Array\"\n                },\n                {\n                    \"object_id\": \"executeProtocol\",\n                    \"name\": \"executeProtocol\",\n                    \"type\": \"Number\"\n                }\n            ],\n            \"lazy\": [],\n            \"commands\": [\n                {\"name\": \"protocol1\", \"type\": \"command\"},\n                {\"name\": \"protocol2\", \"type\": \"command\"},\n                {\"name\": \"protocol3\", \"type\": \"command\"},\n                {\"name\": \"protocol4\", \"type\": \"command\"},\n                {\"name\": \"protocol5\", \"type\": \"command\"},\n                {\"name\": \"protocol6\", \"type\": \"command\"}\n            ],\n            \"static_attributes\": [\n            ],\n            \"expressionLanguage\": \"jexl\",\n            \"explicitAttrs\": false\n        }\n  ]\n}\n"
				},
				"url": {
					"raw": "http://{{hostAgent}}:{{northPortAgent}}/iot/devices",
					"protocol": "http",
					"host": [
						"{{hostAgent}}"
					],
					"port": "{{northPortAgent}}",
					"path": [
						"iot",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "04 - IoT Agent - MicroscopeProvision an Actuator",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"devices\": [\n    {\n            \"device_id\": \"microscope\",\n            \"service\": \"openiot\",\n            \"service_path\": \"/\",\n            \"entity_name\": \"urn:ngsi-ld:microscope\",\n            \"entity_type\": \"microscope\",\n            \"endpoint\": \"http://{{hostMicroscopeAPI}}:{{portMicroscopeAPI}}/microscope/getAnImage\",\n            \"polling\": true,\n            \"transport\": \"HTTP\",\n            \"attributes\": [\n                { \"object_id\": \"Cells\", \"name\": \"Cells\", \"type\": \"Number\" },\n                { \"object_id\": \"cellsViability\", \"name\": \"cellsViability\", \"type\": \"Float\" },\n                { \"object_id\": \"destinyURLWithLiquid\", \"name\": \"destinyURLWithLiquid\", \"type\": \"Text\" },\n                { \"object_id\": \"destinyURLWithoutLiquid\", \"name\": \"destinyURLWithoutLiquid\", \"type\": \"Text\" },\n                { \"object_id\": \"focus\", \"name\": \"focus\", \"type\": \"Number\" },\n                { \"object_id\": \"liveCells\", \"name\": \"liveCells\", \"type\": \"Number\" },\n                { \"object_id\": \"pathImageWithLiquid\", \"name\": \"pathImageWithLiquid\", \"type\": \"Number\" },\n                { \"object_id\": \"pathImageWithoutLiquid\", \"name\": \"pathImageWithoutLiquid\", \"type\": \"Text\" },\n                { \"object_id\": \"temperature\", \"name\": \"temperature\", \"type\": \"Integer\" },\n                { \"object_id\": \"zoom\", \"name\": \"zoom\", \"type\": \"Text\" }\n            ],\n            \"lazy\": [],\n            \"commands\": [\n                {\"name\": \"getAnImage\", \"type\": \"command\"},\n                {\"name\": \"getImageWithoutLiquid\", \"type\": \"command\"},\n                {\"name\": \"getImageWithLiquid\", \"type\": \"command\"}\n            ],\n            \"static_attributes\": [\n            ],\n            \"expressionLanguage\": \"jexl\",\n            \"explicitAttrs\": false\n        }\n  ]\n}\n"
				},
				"url": {
					"raw": "http://{{hostAgent}}:{{northPortAgent}}/iot/devices",
					"protocol": "http",
					"host": [
						"{{hostAgent}}"
					],
					"port": "{{northPortAgent}}",
					"path": [
						"iot",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "05 - Historify Pipette",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot",
						"type": "text"
					},
					{
						"key": "fiware-servicepath",
						"value": "/",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"A subscription to historify info agent\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\":\"urn:ngsi-ld:pipetteActuator\",\n        \"type\": \"pipette\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n        \"timeFirstTransfeStart\",\n        \"timeFirstTransferEnd\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://{{hostQuantumLeap}}:{{portQuantumLeap}}/v2/notify\"\n    },\n    \"attrs\": [\n        \"volume_e\",\n        \"n_falcons_15ml\",\n        \"volume_falcons\",\n        \"n_eppendorfs\",\n        \"starting_v_falcon\",\n        \"starting_v_falcon_B4\",\n        \"n_wellplates\",\n        \"n_falcons_50ml\",\n        \"n_cuvettes\",\n        \"timeStart\",\n        \"timeFirstTransfeStart\",\n        \"timeFirstTransferEnd\",\n        \"intervalSetup\",\n        \"intervalFirstTransfer\",\n        \"intervalTransfer\",\n        \"intervalProcess\",\n        \"protocol\"\n    ]\n  },\n  \"expires\": \"2040-01-01T14:00:00.00Z\",\n  \"throttling\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{hostOrion}}:{{portOrion}}/v2/subscriptions",
					"protocol": "http",
					"host": [
						"{{hostOrion}}"
					],
					"port": "{{portOrion}}",
					"path": [
						"v2",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "06 - Historify Microscope",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"A subscription to historify info agent\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\":\"urn:ngsi-ld:microscopeActuator\",\n        \"type\": \"microscope\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n                \"cellsViability\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"{{hostQuantumLeap}}:{{portQuantumLeap}}/v2/notify\"\n    },\n    \"attrs\": [\n        \"focus\",\n        \"pathImageWithoutLiquid\",\n        \"pathImageWithLiquid\",\n        \"zoom\",\n        \"liveCells\",\n        \"Cells\",\n        \"cellsViability\"\n\n    ]\n  },\n  \"expires\": \"2040-01-01T14:00:00.00Z\",\n  \"throttling\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{hostOrion}}:{{portOrion}}/v2/subscriptions",
					"protocol": "http",
					"host": [
						"{{hostOrion}}"
					],
					"port": "{{portOrion}}",
					"path": [
						"v2",
						"subscriptions"
					]
				}
			},
			"response": []
		}
	]
}